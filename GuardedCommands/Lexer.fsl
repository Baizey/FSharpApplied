{
module Lexer
open System
open System.Text
open Parser
open FSharp.Text.Lexing

let keyword s = 
    match s with
    | "bool"      -> BTYP
    | "int"       -> ITYP
    | "print"     -> PRINT 
    | "skip"      -> SKIP
    | "abort"     -> ABORT
    | "begin"     -> BEGIN
    | "end"       -> END 
    | "if"        -> IF 
    | "fi"        -> FI 
    | "do"        -> DO
    | "od"        -> OD     
    | "true"      -> BOOL(true) 
    | "false"     -> BOOL(false)
    | "procedure" -> PROC
    | "function"  -> FUNC
    | "return"    -> RETURN
    | _           -> NAME s  
}

// These are some regular expression definitions
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let char = ['A'-'Z' 'a'-'z']
let int = digit+
let identifier  = char(char|digit|['_'])*
let quote                 = '\"'
let StringConst           = quote ([^'\"'])* quote


rule tokenize = 
  parse
  | whitespace  { tokenize lexbuf }
  | newline     { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
  | int         { INT<| Int32.Parse(LexBuffer<_>.LexemeString lexbuf) }
  | "^"         { DEREF } 
  | "&"         { REF }
  | "("         { LP  } 
  | ")"         { RP  }
  | "["         { LSP }
  | "]"         { RSP }
  | "{"         { LCP }
  | "}"         { RCP }
  | ","         { COMMA }
  | ";"         { SEMI  }
  | ":"         { COLON }
  | "|"         { BAR }
  | "->"        { TO }
  | ":="        { ASG   }
  | "!"         { NEG }
  | "&&"        { AND }
  | "||"        { OR }
  | "<>"        { NEQ }
  | "<"         { LT }
  | ">"         { GT }
  | "<="        { LE } 
  | "*"         { TIMES }
  | "-"         { MINUS }
  | "="         { EQ }
  | "+"         { PLUS }
  | "%"         { MOD }
  | "/"         { DIV }
  | identifier  { keyword(LexBuffer<_>.LexemeString lexbuf) }
  | eof         { EOF }

